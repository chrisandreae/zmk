/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        // mod/mod-shift tap-dance
        command_td: command_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMAND_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LGUI>, <&kp LS(LGUI)>;
        };

        option_td: option_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "OPTION_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp LS(LALT)>;
        };

        ctrl_td: ctrl_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LCTRL>, <&kp LS(LCTRL)>;
        };

        next_lock: next_lock_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "NEXT_LOCK_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&emacs_next>;
        };

        #define LOCK LG(LC(Q))
        #define NEXT_LOCK &next_lock LOCK 0

        // BT select/disconnect tap-dance
        bt_1_td: bt_1_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT1_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_1>, <&bt BT_DISCONNECT 1>;
        };
        bt_2_td: bt_2_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT2_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_2>, <&bt BT_DISCONNECT 2>;
        };
        bt_3_td: bt_3_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT3_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_3>, <&bt BT_DISCONNECT 3>;
        };
        bt_0_td: bt_0_td_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT0_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_0>, <&bt BT_DISCONNECT 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        emacs_next: emacs_next_0 {
            label = "Emacs_Next";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LC(X)>,
                  <&kp GRAVE>;
        };

        es_reload: es_reload_0 {
            label = "ES_Reload";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 10>,
                  <&kp ESC>,
                  <&kp L>,
                  <&kp L>,
                  <&kp D>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1         &kp F2      &kp F3      &kp F4      &kp F5                                                                                          &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
            &kp EQUAL      &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                                                                      &kp N6  &kp N7  &kp N8      &kp N9      &kp N0      &kp MINUS
            &kp TAB        &kp Q       &kp W       &kp E       &kp R       &kp T                                                                       &kp Y   &kp U   &kp I       &kp O       &kp P       &kp BSLH
            &kp ESC        &kp A       &kp S       &kp D       &kp F       &kp G                                                                       &kp H   &kp J   &kp K       &kp L       &kp SEMI    &kp SQT
            &kp RET        &kp Z       &kp X       &kp C       &kp V       &kp B   &option_td  &command_td &kp HYPER  &layer_td  &kp RGUI &ctrl_td     &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp LANG1
            &magic MAGIC 0 &kp GRAVE   NEXT_LOCK   &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LSHIFT &kp RSHIFT &kp RET  &kp SPACE            &kp UP  &kp DOWN    &kp LBKT    &kp RBKT    &kp LANG2
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PGUP                                                                              &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &none           &none           &kp PGDN        &kp LANG1   &kp LANG2   &trans      &to DEFAULT &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp LOCK        &kp HOME        &kp END                         &trans      &trans      &trans      &trans      &trans      &kp KP_N0              &kp PG_UP    &kp PG_DN    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &ota_bootloader   &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2_td  &bt_3_td  &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0_td  &bt_1_td  &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &tog 3
            >;
        };

        es {
            bindings = <
            &es_reload &trans   &trans   &trans   &trans                                                                              &trans   &trans   &trans   &trans   &trans
            &trans     &trans   &trans   &trans   &trans   &trans                                                            &trans   &trans   &trans   &trans   &trans   &trans
            &trans     &trans   &trans   &trans   &trans   &trans                                                            &trans   &trans   &trans   &trans   &trans   &trans
            &trans     &trans   &trans   &trans   &trans   &trans                                                            &trans   &trans   &trans   &trans   &trans   &trans
            &trans     &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans      &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &none
            &trans     &trans   &trans   &trans   &trans            &trans   &trans   &trans      &trans   &trans   &trans            &trans   &trans   &trans   &trans   &tog 3
            >;
        };
    };
};
